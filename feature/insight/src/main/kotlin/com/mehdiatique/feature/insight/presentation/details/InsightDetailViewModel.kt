package com.mehdiatique.feature.insight.presentation.details

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.mehdiatique.core.data.model.Contact
import com.mehdiatique.core.data.model.Insight
import com.mehdiatique.core.data.repository.ContactRepository
import com.mehdiatique.core.data.repository.InsightRepository
import com.mehdiatique.core.navigation_contract.InsightNav
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.catch
import kotlinx.coroutines.flow.flatMapLatest
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.onStart
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

/**
 * ViewModel for managing insight creation, editing, and viewing logic.
 *
 * Handles loading of existing insights, form updates, saving, and one-time UI events
 * such as navigation or showing messages.
 */
@HiltViewModel
class InsightDetailViewModel @Inject constructor(
    private val contactRepository: ContactRepository,
    private val insightRepository: InsightRepository,
    savedStateHandle: SavedStateHandle
) : ViewModel() {

    private val insightId: Long? = savedStateHandle.get<String>(InsightNav.ARG_INSIGHT_ID)?.toLong()
    private val ownerId: Long? = savedStateHandle.get<String>(InsightNav.ARG_CONTACT_ID)?.toLong()

    private val _state = MutableStateFlow(
        InsightDetailState(
            insight = Insight(
                id = insightId ?: TEMP_ID, // Auto-generated by Room
                createdAt = System.currentTimeMillis(),
                owner = ownerId?.let { Contact(id = it) }
            ),
            mode = if (insightId == null) InsightDetailMode.ADD else InsightDetailMode.VIEW,
            isLoading = insightId != null
        )
    )
    val state: StateFlow<InsightDetailState> = _state

    private val _uiEvent = MutableSharedFlow<InsightDetailUiEvent>()
    val uiEvent: SharedFlow<InsightDetailUiEvent> = _uiEvent

    init {
        insightId?.let { id -> observeInsightDetails(id) }
    }

    /**
     * Handles user-driven events such as field changes, save, and cancel actions.
     *
     * @param event The event to process.
     */
    fun onEvent(event: InsightDetailEvent) {
        when (event) {
            is InsightDetailEvent.ContentChanged -> updateInsight { it.copy(content = event.content) }
            is InsightDetailEvent.ContactChanged -> event.contact?.let { contact -> updateInsight { it.copy(owner = contact) } }
            is InsightDetailEvent.CloseEdit -> _state.update { it.copy(mode = InsightDetailMode.VIEW) }
            is InsightDetailEvent.EditInsight -> _state.update { it.copy(mode = InsightDetailMode.EDIT) }
            is InsightDetailEvent.SaveInsight -> saveInsight()
            is InsightDetailEvent.ErrorShown -> _state.update { it.copy(error = null) }
            is InsightDetailEvent.LoadAllContacts -> loadAllContacts()
            is InsightDetailEvent.OpenContact -> onUiEvent(InsightDetailUiEvent.NavigateToContact(event.contactId))
        }
    }

    /**
     * Handles One-time UI events such as closing the screen, confirming a save,
     * or navigating to related features like actions or insights.
     *
     * @param event The event to process.
     */
    fun onUiEvent(event: InsightDetailUiEvent) {
        viewModelScope.launch {
            _uiEvent.emit(event)
        }
    }

    private fun observeInsightDetails(insightId: Long) {
        viewModelScope.launch {
            insightDetailFlow(insightId = insightId)
                .onStart { _state.update { it.copy(isLoading = true) } }
                .catch { e ->
                    _state.update {
                        it.copy(
                            isLoading = false,
                            error = e.message ?: e.cause?.message ?: "Unknown error"
                        )
                    }
                }
                .collect { insight ->
                    _state.update { it.copy(insight = insight, isLoading = false) }
                }
        }
    }

    @OptIn(ExperimentalCoroutinesApi::class)
    private fun insightDetailFlow(insightId: Long): Flow<Insight> =
        insightRepository.getInsightById(insightId).flatMapLatest { insight ->
            val ownerId = insight.owner?.id
            if (ownerId != null) {
                contactRepository.getContactById(ownerId).map { owner ->
                    insight.copy(owner = owner)
                }
            } else {
                flowOf(insight)
            }
        }

    private fun loadAllContacts() {
        viewModelScope.launch {
            contactRepository.getAllContacts()
                .catch { e ->
                    _state.update { it.copy(error = e.message ?: e.cause?.message ?: "Unknown error") }
                }
                .collect { contacts ->
                    _state.update { it.copy(contacts = contacts) }
                }
        }
    }

    private fun updateInsight(modify: (Insight) -> Insight) {
        val currentInsight = _state.value.insight
        _state.update {
            it.copy(insight = modify(currentInsight.copy(updatedAt = System.currentTimeMillis())))
        }
    }

    private fun saveInsight() {
        val insight = _state.value.insight
        viewModelScope.launch {
            try {
                if (insight.id == TEMP_ID) {
                    val newId = insightRepository.addInsight(insight)
                    updateInsight { it.copy(id = newId) }
                } else {
                    insightRepository.updateInsight(insight)
                }
                onUiEvent(InsightDetailUiEvent.InsightSaved)
            } catch (e: Exception) {
                _state.update { it.copy(error = e.message ?: e.cause?.message ?: "Unknown error") }
            }
        }
    }

    companion object {
        private const val TEMP_ID = 0L
    }
}
