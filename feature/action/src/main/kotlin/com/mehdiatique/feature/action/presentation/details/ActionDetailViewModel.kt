package com.mehdiatique.feature.action.presentation.details

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.mehdiatique.core.data.model.Action
import com.mehdiatique.core.data.repository.ContactRepository
import com.mehdiatique.core.data.repository.InsightRepository
import com.mehdiatique.core.data.repository.ActionRepository
import com.mehdiatique.core.navigation_contract.ActionNav
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.catch
import kotlinx.coroutines.flow.combine
import kotlinx.coroutines.flow.flatMapLatest
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.flow.onStart
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

/**
 * ViewModel for managing action creation, editing, and viewing logic.
 *
 * Handles loading of existing actions, form updates, saving, and one-time UI events
 * such as navigation or showing messages.
 */
@HiltViewModel
class ActionDetailViewModel @Inject constructor(
    private val contactRepository: ContactRepository,
    private val insightRepository: InsightRepository,
    private val actionRepository: ActionRepository,
    savedStateHandle: SavedStateHandle
) : ViewModel() {

    private val actionId: Long? = savedStateHandle.get<String>(ActionNav.ARG_ACTION_ID)?.toLong()
    private val ownerId: Long? = savedStateHandle.get<String>(ActionNav.ARG_CONTACT_ID)?.toLong()

    private val _state = MutableStateFlow(
        ActionDetailState(
            action = Action(
                id = actionId ?: TEMP_ID, // Auto-generated by Room
                createdAt = System.currentTimeMillis(),
                ownerId = ownerId
            ),
            mode = if (actionId == null) ActionDetailMode.ADD else ActionDetailMode.VIEW,
            isLoading = actionId != null
        )
    )
    val state: StateFlow<ActionDetailState> = _state

    private val _uiEvent = MutableSharedFlow<ActionDetailUiEvent>()
    val uiEvent: SharedFlow<ActionDetailUiEvent> = _uiEvent

    init {
        actionId?.let { id -> observeActionDetails(id) }
    }

    /**
     * Handles user-driven events such as field changes, save, and cancel actions.
     *
     * @param event The event to process.
     */
    fun onEvent(event: ActionDetailEvent) {
        when (event) {
            is ActionDetailEvent.TitleChanged -> updateAction { it.copy(title = event.title) }
            is ActionDetailEvent.PriorityChanged -> updateAction { it.copy(priority = event.priority) }
            is ActionDetailEvent.ContactChanged -> updateAction { it.copy(ownerId = event.contactId) }
            is ActionDetailEvent.CloseEdit -> _state.update { it.copy(mode = ActionDetailMode.VIEW) }
            is ActionDetailEvent.EditAction -> _state.update { it.copy(mode = ActionDetailMode.EDIT) }
            is ActionDetailEvent.SaveAction -> saveAction()
            is ActionDetailEvent.ErrorShown -> _state.update { it.copy(error = null) }
            is ActionDetailEvent.LoadAllContacts -> loadAllContacts()
            is ActionDetailEvent.OpenContact -> onUiEvent(ActionDetailUiEvent.NavigateToContact(event.contactId))
            is ActionDetailEvent.AddInsight -> onUiEvent(ActionDetailUiEvent.NavigateToAddInsight)
            is ActionDetailEvent.OpenInsight -> onUiEvent(ActionDetailUiEvent.NavigateToInsight(event.insightId))
        }
    }

    /**
     * Handles One-time UI events such as closing the screen, confirming a save,
     * or navigating to related features like contact or insight.
     *
     * @param event The event to process.
     */
    fun onUiEvent(event: ActionDetailUiEvent) {
        viewModelScope.launch {
            _uiEvent.emit(event)
        }
    }

    private fun observeActionDetails(actionId: Long) {
        viewModelScope.launch {
            actionDetailFlow(actionId)
                .onStart { _state.update { it.copy(isLoading = true) } }
                .catch { e ->
                    _state.update {
                        it.copy(
                            isLoading = false,
                            error = e.message ?: e.cause?.message ?: "Unknown error"
                        )
                    }
                }
                .collect { details ->
                    _state.update {
                        it.copy(
                            action = details.action,
                            owner = details.owner,
                            insights = details.insights,
                            isLoading = false
                        )
                    }
                }
        }
    }

    @OptIn(ExperimentalCoroutinesApi::class)
    private fun actionDetailFlow(actionId: Long): Flow<ActionDetails> =
        actionRepository.getActionById(actionId).flatMapLatest { action ->
            val ownerFlow = action.ownerId?.let { contactRepository.getContactById(it) } ?: flowOf(null)
            val insightsFlow = insightRepository.getInsightsForAction(action.id)
            combine(
                flowOf(action),
                ownerFlow,
                insightsFlow
            ) { action, owner, insights ->
                ActionDetails(action = action, owner = owner, insights = insights)
            }
        }

    private fun loadAllContacts() {
        viewModelScope.launch {
            contactRepository.getAllContacts()
                .catch { e ->
                    _state.update { it.copy(error = e.message ?: e.cause?.message ?: "Unknown error") }
                }
                .collect { contacts ->
                    _state.update { it.copy(contacts = contacts) }
                }
        }
    }

    private fun updateAction(modify: (Action) -> Action) {
        val currentAction = _state.value.action
        _state.update {
            it.copy(action = modify(currentAction.copy(updatedAt = System.currentTimeMillis())))
        }
    }

    private fun saveAction() {
        val action = _state.value.action
        viewModelScope.launch {
            try {
                if (action.id == TEMP_ID) {
                    val newId = actionRepository.addAction(action)
                    updateAction { it.copy(id = newId) }
                } else {
                    actionRepository.updateAction(action)
                }
                onUiEvent(ActionDetailUiEvent.ActionSaved)
            } catch (e: Exception) {
                _state.update { it.copy(error = e.message ?: e.cause?.message ?: "Unknown error") }
            }
        }
    }

    companion object {
        private const val TEMP_ID = 0L
    }
}
