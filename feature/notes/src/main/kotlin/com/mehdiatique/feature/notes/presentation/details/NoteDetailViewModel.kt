package com.mehdiatique.feature.notes.presentation.details

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.mehdiatique.core.data.model.Note
import com.mehdiatique.core.data.repository.NoteRepository
import com.mehdiatique.feature.notes.navigation.NotesRoute
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.catch
import kotlinx.coroutines.flow.onStart
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

/**
 * ViewModel for managing note creation, editing, and viewing logic.
 *
 * Handles loading of existing notes, form updates, saving, and one-time UI events
 * such as navigation or showing messages.
 */
@HiltViewModel
class NoteDetailViewModel @Inject constructor(
    private val noteRepository: NoteRepository,
    savedStateHandle: SavedStateHandle
) : ViewModel() {

    private val noteId: Long? = savedStateHandle.get<String>(NotesRoute.Detail.ARG_ID)?.toLong()

    private val _state = MutableStateFlow(
        NoteDetailState(
            mode = when {
                noteId == null -> NoteDetailMode.ADD
                else -> NoteDetailMode.VIEW
            },
            isLoading = noteId != null
        )
    )
    val state: StateFlow<NoteDetailState> = _state

    private val _uiEvent = MutableSharedFlow<NoteDetailUiEvent>()
    val uiEvent: SharedFlow<NoteDetailUiEvent> = _uiEvent

    init {
        noteId?.let { id ->
            viewModelScope.launch {
                noteRepository.getNoteById(id)
                    .onStart { _state.update { it.copy(isLoading = true) } }
                    .catch { e ->
                        _state.update {
                            it.copy(
                                isLoading = false,
                                error = e.message ?: e.cause?.message ?: "Unknown error"
                            )
                        }
                    }
                    .collect { note ->
                        _state.update { it.copy(note = note, isLoading = false) }
                    }
            }
        }
    }

    /**
     * Handles user-driven events such as field changes, save, and cancel actions.
     *
     * @param event The event to process.
     */
    fun onEvent(event: NoteDetailEvent) {
        when (event) {
            is NoteDetailEvent.ContentChanged -> updateNote { it.copy(content = event.content) }
            is NoteDetailEvent.TitleChanged -> updateNote { it.copy(title = event.title) }
            is NoteDetailEvent.ContactChanged -> updateNote { it.copy(ownerId = event.contactId) }

            is NoteDetailEvent.CloseEdit -> {
                _state.update { it.copy(mode = NoteDetailMode.VIEW) }
            }

            is NoteDetailEvent.EditNote -> {
                _state.update { it.copy(mode = NoteDetailMode.EDIT) }
            }

            is NoteDetailEvent.SaveNote -> saveNote()

            is NoteDetailEvent.ErrorShown -> {
                _state.update { it.copy(error = null) }
            }
        }
    }

    /**
     * Handles One-time UI events such as closing the screen, confirming a save,
     * or navigating to related features like tasks or notes.
     *
     * @param event The event to process.
     */
    fun onUiEvent(event: NoteDetailUiEvent) {
        viewModelScope.launch {
            _uiEvent.emit(event)
        }
    }

    private fun updateNote(modify: (Note) -> Note) {
        val currentNote = _state.value.note ?: Note(
            id = TEMP_ID, // Auto-generated by Room
            content = "",
            title = "",
            ownerId = null,
            createdAt = System.currentTimeMillis(),
            updatedAt = null,
        )
        _state.update {
            it.copy(note = modify(currentNote.copy(updatedAt = System.currentTimeMillis())))
        }
    }


    private fun saveNote() {
        val note = _state.value.note ?: return
        viewModelScope.launch {
            try {
                if (note.id == TEMP_ID) {
                    noteRepository.addNote(note)
                } else
                    noteRepository.updateNote(note)

                onUiEvent(NoteDetailUiEvent.NoteSaved)
            } catch (e: Exception) {
                _state.update { it.copy(error = e.message ?: e.cause?.message ?: "Unknown error") }
            }
        }
    }

    companion object {
        private const val TEMP_ID = 0L
    }
}
