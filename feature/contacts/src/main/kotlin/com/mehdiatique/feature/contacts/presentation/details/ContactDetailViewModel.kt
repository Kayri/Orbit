package com.mehdiatique.feature.contacts.presentation.details

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.mehdiatique.core.data.model.Contact
import com.mehdiatique.core.data.repository.ContactRepository
import com.mehdiatique.feature.contacts.navigation.ContactsRoute
import com.mehdiatique.feature.contacts.presentation.ContactsEvent
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.catch
import kotlinx.coroutines.flow.onStart
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

/**
 * ViewModel responsible for managing the state and business logic related to
 * viewing, creating, and editing a single contact within the Contacts feature.
 *
 * This ViewModel handles both "add" and "edit" flows:
 * - If a contact ID is present in the [SavedStateHandle], it fetches and populates the state for editing.
 * - Otherwise, it starts with an empty [ContactDetailState] for creating a new contact.
 *
 * It exposes:
 * - A [StateFlow] of [ContactDetailState] to drive the UI.
 * - A [SharedFlow] of error messages to show one-time notifications (e.g., via Snackbar).
 *
 * @property contactRepository The repository used to retrieve, add, or update contacts.
 * @property savedStateHandle The saved state handle that may contain a "contactId" used to load an existing contact.
 */
@HiltViewModel
class ContactDetailViewModel @Inject constructor(
    private val contactRepository: ContactRepository,
    savedStateHandle: SavedStateHandle
) : ViewModel() {

    private val contactId: Long? = savedStateHandle.get<String>(ContactsRoute.Detail.ARG_ID)?.toLong()

    private val _state = MutableStateFlow(ContactDetailState(isLoading = true))
    val state: StateFlow<ContactDetailState> = _state

    init {
        contactId?.let { id ->
            viewModelScope.launch {
                contactRepository.getContactById(id)
                    .onStart { _state.update { it.copy(isLoading = true) } }
                    .catch { e ->
                        _state.update {
                            it.copy(
                                isLoading = false,
                                error = e.message ?: e.cause?.message ?: "Unknown error"
                            )
                        }
                    }
                    .collect { contact ->
                        _state.value = ContactDetailState.from(contact)
                        _state.update { it.copy(isLoading = false) }
                    }
            }
        }
    }

    /**
     * Handles user-driven events such as field changes, save, and cancel actions.
     *
     * @param event The event to process.
     */
    fun onEvent(event: ContactDetailEvent) {
        when (event) {
            is ContactDetailEvent.NameChanged -> _state.update { it.copy(name = event.name) }
            is ContactDetailEvent.EmailChanged -> _state.update { it.copy(email = event.email) }
            is ContactDetailEvent.PhoneChanged -> _state.update { it.copy(phone = event.phone) }
            is ContactDetailEvent.CompanyChanged -> _state.update { it.copy(company = event.company) }
            is ContactDetailEvent.NotesChanged -> _state.update { it.copy(notes = event.notes) }
            is ContactDetailEvent.SaveContact -> {
                saveContact()
            }

            is ContactDetailEvent.Cancel -> {
                _state.value = ContactDetailState() // Reset form
            }

            is ContactDetailEvent.ErrorShown -> {
                _state.update { it.copy(error = null) }
            }
        }
    }

    /**
     * Saves the current contact:
     * - Adds a new contact if no contact ID is present.
     * - Updates the existing contact otherwise.
     *
     * Emits an error message to [errorMessage] if the operation fails.
     */
    fun saveContact() {
        viewModelScope.launch {
            val currentState = _state.value
            val newContact = Contact(
                id = contactId ?: 0, // Auto-generated by Room
                name = currentState.name,
                email = currentState.email.takeIf { it.isNotBlank() },
                phone = currentState.phone.takeIf { it.isNotBlank() },
                company = currentState.company.takeIf { it.isNotBlank() },
                notes = currentState.notes.takeIf { it.isNotBlank() },
                createdAt = currentState.createdAt ?: System.currentTimeMillis()
            )

            try {
                if (contactId == null)
                    contactRepository.addContact(newContact)
                else
                    contactRepository.updateContact(newContact)
            } catch (e: Exception) {
                _state.update { it.copy(error = e.message ?: e.cause?.message ?: "Unknown error") }
            }
        }
    }
}
